version: '3.8'

services:
  # Shared Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-network

  # Service A Database
  postgres-service-a:
    image: postgres:15
    environment:
      POSTGRES_DB: service_a
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - microservices-network

  # Service B Database
  postgres-service-b:
    image: postgres:15
    environment:
      POSTGRES_DB: service_b
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    networks:
      - microservices-network

  # Service A (gRPC Calculator)
  service-a:
    build: ./service-a
    depends_on:
      - postgres-service-a
      - kafka
    ports:
      - "50051:50051"
    environment:
      DB_HOST: postgres-service-a
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: service_a
      KAFKA_BROKER: kafka:29092  # Internal network communication
    networks:
      - microservices-network

  # Service B (REST Summation)
  service-b:
    build: ./service-b
    depends_on:
      - postgres-service-b
      - kafka
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      KAFKA_BROKER: kafka:29092  # Internal network communication
      DB_HOST: postgres-service-b
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: service_b
    networks:
      - microservices-network

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - microservices-network

volumes:
  postgres_service_a_data:
  postgres_service_b_data:

networks:
  microservices-network:
    driver: bridge